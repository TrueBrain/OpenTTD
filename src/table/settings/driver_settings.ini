; This file is part of OpenTTD.
; OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
; OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
;

; Driver settings as stored in the main configuration file ("openttd.cfg").

[pre-amble]
#if defined(_WIN32) && !defined(DEDICATED)
extern bool _window_maximize;
#endif
#ifdef WITH_COCOA
extern bool _allow_hidpi_window;
#endif

static std::initializer_list<const char*> _support8bppmodes{"no", "system" , "hardware"};

static const SettingVariant _driver_settings[] = {
[post-amble]
};
[templates]
SDTG_LIST  =  SDTG_LIST($name, $type, $flags, $var, $def,       $length,                                                            $from, $to, $cat, $extra, $startup),
SDTG_BOOL  =  SDTG_BOOL($name,                     $flags, $var, $def,                        $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDTG_OMANY = SDTG_OMANY($name,              $type, $flags, $var, $def,       $max, $full,     $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDTG_SSTR  =  SDTG_SSTR($name, $type, $flags, $var, $def,       0,                                               $pre_cb, $post_cb, $from, $to, $cat, $extra, $startup),
SDTC_BOOL  =  SDTC_BOOL(              $var,        $flags, $def,                              $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDTC_LIST  =  SDTC_LIST(              $var, $type, $flags, $def,                                                                          $from, $to,        $cat, $extra, $startup),
SDTC_VAR   =   SDTC_VAR(              $var, $type, $flags, $def,       $min, $max, $interval, $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),

[validation]
SDTG_OMANY = static_assert($max <= MAX_$type, "Maximum value for $var exceeds storage size");
SDTC_VAR = static_assert($max <= MAX_$type, "Maximum value for $var exceeds storage size");

[defaults]
flags    = SF_NOT_IN_SAVE | SF_NO_NETWORK_SYNC
interval = 0
str      = STR_NULL
strhelp  = STR_CONFIG_SETTING_NO_EXPLANATION_AVAILABLE_HELPTEXT
strval   = STR_NULL
pre_cb   = nullptr
post_cb  = nullptr
load     = nullptr
from     = SL_MIN_VERSION
to       = SL_MAX_VERSION
cat      = SC_ADVANCED
extra    = 0
startup  = false


[SDTC_BOOL]
var      = sound.news_ticker
def      = true
str      = STR_CONFIG_SETTING_SOUND_TICKER
strhelp  = STR_CONFIG_SETTING_SOUND_TICKER_HELPTEXT

[SDTC_BOOL]
var      = sound.news_full
def      = true
str      = STR_CONFIG_SETTING_SOUND_NEWS
strhelp  = STR_CONFIG_SETTING_SOUND_NEWS_HELPTEXT

[SDTC_BOOL]
var      = sound.new_year
def      = true
str      = STR_CONFIG_SETTING_SOUND_NEW_YEAR
strhelp  = STR_CONFIG_SETTING_SOUND_NEW_YEAR_HELPTEXT

[SDTC_BOOL]
var      = sound.confirm
def      = true
str      = STR_CONFIG_SETTING_SOUND_CONFIRM
strhelp  = STR_CONFIG_SETTING_SOUND_CONFIRM_HELPTEXT

[SDTC_BOOL]
var      = sound.click_beep
def      = true
str      = STR_CONFIG_SETTING_SOUND_CLICK
strhelp  = STR_CONFIG_SETTING_SOUND_CLICK_HELPTEXT

[SDTC_BOOL]
var      = sound.disaster
def      = true
str      = STR_CONFIG_SETTING_SOUND_DISASTER
strhelp  = STR_CONFIG_SETTING_SOUND_DISASTER_HELPTEXT

[SDTC_BOOL]
var      = sound.vehicle
def      = true
str      = STR_CONFIG_SETTING_SOUND_VEHICLE
strhelp  = STR_CONFIG_SETTING_SOUND_VEHICLE_HELPTEXT

[SDTC_BOOL]
var      = sound.ambient
def      = true
str      = STR_CONFIG_SETTING_SOUND_AMBIENT
strhelp  = STR_CONFIG_SETTING_SOUND_AMBIENT_HELPTEXT

[SDTC_VAR]
var      = music.playlist
type     = SLE_UINT8
def      = 0
min      = 0
max      = 5
interval = 1
cat      = SC_BASIC

[SDTC_VAR]
var      = music.music_vol
type     = SLE_UINT8
def      = 50
min      = 0
max      = 127
interval = 1
cat      = SC_BASIC

[SDTC_VAR]
var      = music.effect_vol
type     = SLE_UINT8
def      = 100
min      = 0
max      = 127
interval = 1
cat      = SC_BASIC

[SDTC_LIST]
var      = music.custom_1
type     = SLE_UINT8
def      = nullptr
cat      = SC_BASIC

[SDTC_LIST]
var      = music.custom_2
type     = SLE_UINT8
def      = nullptr
cat      = SC_BASIC

[SDTC_BOOL]
var      = music.playing
def      = true
cat      = SC_BASIC

[SDTC_BOOL]
var      = music.shuffle
def      = false
cat      = SC_BASIC

[SDTG_LIST]
name     = ""resolution""
type     = SLE_INT
length   = 2
var      = _cur_resolution
def      = ""0,0""
cat      = SC_BASIC
startup  = true

[SDTG_SSTR]
name     = ""videodriver""
type     = SLE_STRQ
var      = _ini_videodriver
def      = nullptr
cat      = SC_EXPERT
startup  = true

[SDTG_SSTR]
name     = ""musicdriver""
type     = SLE_STRQ
var      = _ini_musicdriver
def      = nullptr
cat      = SC_EXPERT
startup  = true

[SDTG_SSTR]
name     = ""sounddriver""
type     = SLE_STRQ
var      = _ini_sounddriver
def      = nullptr
cat      = SC_EXPERT
startup  = true

[SDTG_SSTR]
name     = ""blitter""
type     = SLE_STRQ
var      = _ini_blitter
def      = nullptr
startup  = true

[SDTG_BOOL]
name     = ""fullscreen""
var      = _fullscreen
def      = false
cat      = SC_BASIC
startup  = true

[SDTG_BOOL]
name     = ""video_vsync""
var      = _video_vsync
def      = false
cat      = SC_BASIC
startup  = true

[SDTG_OMANY]
name     = ""support8bpp""
type     = SLE_UINT8
var      = _support8bpp
def      = 0
max      = 2
full     = _support8bppmodes
cat      = SC_BASIC
startup  = true

[SDTG_BOOL]
ifdef    = WITH_COCOA
name     = ""allow_hidpi""
var      = _allow_hidpi_window
def      = true
startup  = true

[SDTG_BOOL]
ifdef    = WITH_COCOA
name     = ""video_hw_accel""
var      = _video_hw_accel
def      = false
cat      = SC_BASIC
startup  = true

[SDTG_BOOL]
ifndef   = WITH_COCOA
name     = ""video_hw_accel""
var      = _video_hw_accel
def      = true
cat      = SC_BASIC
startup  = true

[SDTG_BOOL]
ifdef    = WIN32
name     = ""window_maximize""
var      = _window_maximize
def      = false
cat      = SC_BASIC
startup  = true
