; This file is part of OpenTTD.
; OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
; OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
; See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
;

; Settings as stored in the main configuration file ("openttd.cfg") and in the
; savegame PATS chunk (if not flagged not to).

[pre-amble]
/* Begin - Callback Functions for the various settings */
static void v_PositionMainToolbar(int32 new_value);
static void v_PositionStatusbar(int32 new_value);
static void RedrawSmallmap(int32 new_value);
static void StationSpreadChanged(int32 new_value);
static void CloseSignalGUI(int32 new_value);
static void UpdateConsists(int32 new_value);
static void TrainAccelerationModelChanged(int32 new_value);
static void RoadVehAccelerationModelChanged(int32 new_value);
static void TrainSlopeSteepnessChanged(int32 new_value);
static void RoadVehSlopeSteepnessChanged(int32 new_value);
static void TownFoundingChanged(int32 new_value);
static void DifficultyNoiseChange(int32 new_value);
static void MaxNoAIsChange(int32 new_value);
static bool CheckRoadSide(int32 &new_value);
static bool CheckMaxHeightLevel(int32 &new_value);
static bool CheckFreeformEdges(int32 &new_value);
static void UpdateFreeformEdges(int32 new_value);
static bool CheckDynamicEngines(int32 &new_value);
static void StationCatchmentChanged(int32 new_value);
static void InvalidateCompanyLiveryWindow(int32 new_value);
static void InvalidateNewGRFChangeWindows(int32 new_value);
static void ZoomMinMaxChanged(int32 new_value);
static void SpriteZoomMinChanged(int32 new_value);
static void MaxVehiclesChanged(int32 new_value);
static void InvalidateShipPathCache(int32 new_value);

/* End - Callback Functions for the various settings */

/* Some settings do not need to be synchronised when playing in multiplayer.
 * These include for example the GUI settings and will not be saved with the
 * savegame.
 * It is also a bit tricky since you would think that service_interval
 * for example does not need to be synched. Every client assigns the
 * service_interval value to the v->service_interval, meaning that every client
 * assigns its own value. If the setting was company-based, that would mean that
 * vehicles could decide on different moments that they are heading back to a
 * service depot, causing desyncs on a massive scale. */
const SettingTable GetPfSettingsTable() {
    static const SettingVariant _settings_table[] = {
[post-amble]
    };
    return _settings_table;
}
[templates]
SDTG_BOOL  =  SDTG_BOOL($name,                     $flags, $var, $def,                        $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDTG_VAR   =   SDTG_VAR($name,              $type, $flags, $var, $def, $min, $max, $interval, $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDTG_OMANY = SDTG_OMANY($name,              $type, $flags, $var, $def,       $max, $full,     $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDTC_BOOL  =  SDTC_BOOL(              $var,        $flags, $def,                              $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDTC_LIST  =  SDTC_LIST(              $var, $type, $flags, $def,                                                                          $from, $to,        $cat, $extra, $startup),
SDTC_OMANY = SDTC_OMANY(              $var, $type, $flags, $def,             $max, $full,     $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDTC_SSTR  =  SDTC_SSTR(              $var, $type, $flags, $def,             $length,                                  $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDTC_VAR   =   SDTC_VAR(              $var, $type, $flags, $def,       $min, $max, $interval, $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDT_BOOL   =   SDT_BOOL(GameSettings, $var,        $flags, $def,                              $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDT_OMANY  =  SDT_OMANY(GameSettings, $var, $type, $flags, $def,             $max, $full,     $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to, $load, $cat, $extra, $startup),
SDT_SSTR   =   SDT_SSTR(GameSettings, $var, $type, $flags, $def,                                                       $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),
SDT_VAR    =    SDT_VAR(GameSettings, $var, $type, $flags, $def,       $min, $max, $interval, $str, $strhelp, $strval, $pre_cb, $post_cb, $from, $to,        $cat, $extra, $startup),

[validation]
SDTG_VAR = static_assert($max <= MAX_$type, "Maximum value for $var exceeds storage size");
SDTG_OMANY = static_assert($max <= MAX_$type, "Maximum value for $var exceeds storage size");
SDTC_OMANY = static_assert($max <= MAX_$type, "Maximum value for $var exceeds storage size");
SDTC_VAR = static_assert($max <= MAX_$type, "Maximum value for $var exceeds storage size");
SDT_OMANY = static_assert($max <= MAX_$type, "Maximum value for GameSettings.$var exceeds storage size");
SDT_VAR = static_assert($max <= MAX_$type, "Maximum value for GameSettings.$var exceeds storage size");

[defaults]
flags    = SF_NONE
interval = 0
str      = STR_NULL
strhelp  = STR_CONFIG_SETTING_NO_EXPLANATION_AVAILABLE_HELPTEXT
strval   = STR_NULL
pre_cb   = nullptr
post_cb  = nullptr
load     = nullptr
from     = SL_MIN_VERSION
to       = SL_MAX_VERSION
cat      = SC_ADVANCED
extra    = 0
startup  = false


[SDT_VAR]
var      = pf.wait_for_pbs_path
type     = SLE_UINT8
from     = SLV_100
def      = 30
min      = 2
max      = 255
cat      = SC_EXPERT

[SDT_BOOL]
var      = pf.reserve_paths
from     = SLV_100
def      = false
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.path_backoff_interval
type     = SLE_UINT8
from     = SLV_100
def      = 20
min      = 1
max      = 255
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_max_search_nodes
type     = SLE_UINT
def      = 10000
min      = 500
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_rail_firstred_penalty
type     = SLE_UINT
def      = 10 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_rail_firstred_exit_penalty
type     = SLE_UINT
def      = 100 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_rail_lastred_penalty
type     = SLE_UINT
def      = 10 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_rail_station_penalty
type     = SLE_UINT
def      = 1 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_rail_slope_penalty
type     = SLE_UINT
def      = 1 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_rail_curve_penalty
type     = SLE_UINT
def      = 1 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_rail_depot_reverse_penalty
type     = SLE_UINT
def      = 50 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_rail_pbs_cross_penalty
type     = SLE_UINT
from     = SLV_100
def      = 3 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_rail_pbs_signal_back_penalty
type     = SLE_UINT
from     = SLV_100
def      = 15 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_buoy_penalty
type     = SLE_UINT
def      = 2 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_water_curve_penalty
type     = SLE_UINT
def      = 1 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_road_curve_penalty
type     = SLE_UINT
def      = 1 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_crossing_penalty
type     = SLE_UINT
def      = 3 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_road_drive_through_penalty
type     = SLE_UINT
from     = SLV_47
def      = 8 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_road_dt_occupied_penalty
type     = SLE_UINT
from     = SLV_130
def      = 8 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.npf_road_bay_occupied_penalty
type     = SLE_UINT
from     = SLV_130
def      = 15 * NPF_TILE_LENGTH
min      = 0
max      = 100000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.npf.maximum_go_to_depot_penalty
type     = SLE_UINT
from     = SLV_131
def      = 20 * NPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

##
[SDT_BOOL]
var      = pf.yapf.disable_node_optimization
from     = SLV_28
def      = false
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.max_search_nodes
type     = SLE_UINT
from     = SLV_28
def      = 10000
min      = 500
max      = 1000000
cat      = SC_EXPERT

[SDT_BOOL]
var      = pf.yapf.rail_firstred_twoway_eol
from     = SLV_28
def      = false
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_firstred_penalty
type     = SLE_UINT
from     = SLV_28
def      = 10 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_firstred_exit_penalty
type     = SLE_UINT
from     = SLV_28
def      = 100 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_lastred_penalty
type     = SLE_UINT
from     = SLV_28
def      = 10 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_lastred_exit_penalty
type     = SLE_UINT
from     = SLV_28
def      = 100 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_station_penalty
type     = SLE_UINT
from     = SLV_28
def      = 10 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_slope_penalty
type     = SLE_UINT
from     = SLV_28
def      = 2 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_curve45_penalty
type     = SLE_UINT
from     = SLV_28
def      = 1 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_curve90_penalty
type     = SLE_UINT
from     = SLV_28
def      = 6 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_depot_reverse_penalty
type     = SLE_UINT
from     = SLV_28
def      = 50 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_crossing_penalty
type     = SLE_UINT
from     = SLV_28
def      = 3 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_look_ahead_max_signals
type     = SLE_UINT
from     = SLV_28
def      = 10
min      = 1
max      = 100
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_look_ahead_signal_p0
type     = SLE_INT
from     = SLV_28
def      = 500
min      = -1000000
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_look_ahead_signal_p1
type     = SLE_INT
from     = SLV_28
def      = -100
min      = -1000000
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_look_ahead_signal_p2
type     = SLE_INT
from     = SLV_28
def      = 5
min      = -1000000
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_pbs_cross_penalty
type     = SLE_UINT
from     = SLV_100
def      = 3 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_pbs_station_penalty
type     = SLE_UINT
from     = SLV_100
def      = 8 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_pbs_signal_back_penalty
type     = SLE_UINT
from     = SLV_100
def      = 15 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_doubleslip_penalty
type     = SLE_UINT
from     = SLV_100
def      = 1 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_longer_platform_penalty
type     = SLE_UINT
from     = SLV_33
def      = 8 * YAPF_TILE_LENGTH
min      = 0
max      = 20000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_longer_platform_per_tile_penalty
type     = SLE_UINT
from     = SLV_33
def      = 0 * YAPF_TILE_LENGTH
min      = 0
max      = 20000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_shorter_platform_penalty
type     = SLE_UINT
from     = SLV_33
def      = 40 * YAPF_TILE_LENGTH
min      = 0
max      = 20000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.rail_shorter_platform_per_tile_penalty
type     = SLE_UINT
from     = SLV_33
def      = 0 * YAPF_TILE_LENGTH
min      = 0
max      = 20000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.road_slope_penalty
type     = SLE_UINT
from     = SLV_33
def      = 2 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.road_curve_penalty
type     = SLE_UINT
from     = SLV_33
def      = 1 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.road_crossing_penalty
type     = SLE_UINT
from     = SLV_33
def      = 3 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.road_stop_penalty
type     = SLE_UINT
from     = SLV_47
def      = 8 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.road_stop_occupied_penalty
type     = SLE_UINT
from     = SLV_130
def      = 8 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.road_stop_bay_occupied_penalty
type     = SLE_UINT
from     = SLV_130
def      = 15 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.maximum_go_to_depot_penalty
type     = SLE_UINT
from     = SLV_131
def      = 20 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.ship_curve45_penalty
type     = SLE_UINT
from     = SLV_SHIP_CURVE_PENALTY
def      = 1 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT

[SDT_VAR]
var      = pf.yapf.ship_curve90_penalty
type     = SLE_UINT
from     = SLV_SHIP_CURVE_PENALTY
def      = 6 * YAPF_TILE_LENGTH
min      = 0
max      = 1000000
cat      = SC_EXPERT
